/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as PostsIndexImport } from './routes/posts.index'
import { Route as StoreSplatImport } from './routes/store/$'
import { Route as PostsPostIdImport } from './routes/posts.$postId'
import { Route as StoreProductsSplatImport } from './routes/store/products/$'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const PostsIndexRoute = PostsIndexImport.update({
  id: '/posts/',
  path: '/posts/',
  getParentRoute: () => rootRoute,
} as any)

const StoreSplatRoute = StoreSplatImport.update({
  id: '/store/$',
  path: '/store/$',
  getParentRoute: () => rootRoute,
} as any)

const PostsPostIdRoute = PostsPostIdImport.update({
  id: '/posts/$postId',
  path: '/posts/$postId',
  getParentRoute: () => rootRoute,
} as any)

const StoreProductsSplatRoute = StoreProductsSplatImport.update({
  id: '/store/products/$',
  path: '/store/products/$',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/posts/$postId': {
      id: '/posts/$postId'
      path: '/posts/$postId'
      fullPath: '/posts/$postId'
      preLoaderRoute: typeof PostsPostIdImport
      parentRoute: typeof rootRoute
    }
    '/store/$': {
      id: '/store/$'
      path: '/store/$'
      fullPath: '/store/$'
      preLoaderRoute: typeof StoreSplatImport
      parentRoute: typeof rootRoute
    }
    '/posts/': {
      id: '/posts/'
      path: '/posts'
      fullPath: '/posts'
      preLoaderRoute: typeof PostsIndexImport
      parentRoute: typeof rootRoute
    }
    '/store/products/$': {
      id: '/store/products/$'
      path: '/store/products/$'
      fullPath: '/store/products/$'
      preLoaderRoute: typeof StoreProductsSplatImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/posts/$postId': typeof PostsPostIdRoute
  '/store/$': typeof StoreSplatRoute
  '/posts': typeof PostsIndexRoute
  '/store/products/$': typeof StoreProductsSplatRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/posts/$postId': typeof PostsPostIdRoute
  '/store/$': typeof StoreSplatRoute
  '/posts': typeof PostsIndexRoute
  '/store/products/$': typeof StoreProductsSplatRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/posts/$postId': typeof PostsPostIdRoute
  '/store/$': typeof StoreSplatRoute
  '/posts/': typeof PostsIndexRoute
  '/store/products/$': typeof StoreProductsSplatRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/posts/$postId'
    | '/store/$'
    | '/posts'
    | '/store/products/$'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/posts/$postId' | '/store/$' | '/posts' | '/store/products/$'
  id:
    | '__root__'
    | '/'
    | '/posts/$postId'
    | '/store/$'
    | '/posts/'
    | '/store/products/$'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  PostsPostIdRoute: typeof PostsPostIdRoute
  StoreSplatRoute: typeof StoreSplatRoute
  PostsIndexRoute: typeof PostsIndexRoute
  StoreProductsSplatRoute: typeof StoreProductsSplatRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  PostsPostIdRoute: PostsPostIdRoute,
  StoreSplatRoute: StoreSplatRoute,
  PostsIndexRoute: PostsIndexRoute,
  StoreProductsSplatRoute: StoreProductsSplatRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/posts/$postId",
        "/store/$",
        "/posts/",
        "/store/products/$"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/posts/$postId": {
      "filePath": "posts.$postId.tsx"
    },
    "/store/$": {
      "filePath": "store/$.tsx"
    },
    "/posts/": {
      "filePath": "posts.index.tsx"
    },
    "/store/products/$": {
      "filePath": "store/products/$.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
